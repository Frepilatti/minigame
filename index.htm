<!DOCTYPE html>

<html>

<head>

    <meta charset="utf-8"/>
    <title>Minigame - Frederico</title>
    <script src="./Sprite.js"></script>
    <style>
        
        canvas {
            position: absolute;
            top: 0px;
            bottom: 0px;
            left: 0px;
            right: 0px;
            margin: auto;

        }
    </style>

</head>

<body>

    <script>
        // Game variables
        var canvas, 
            context, 
            gameHeight, 
            gameWidth, 
            maxJump = 3, 
            obstacleSpeed = 6,
            currentStats,
            highScore,
            img,
            pointsToNextLvl = [10, 20, 30, 40, 50],
            currentLvl = 0,

            labelnextLvl = {
                newText: "",
                textOpacity: 0.0,

                fadeIn: function(dt){
                    var fadeInId = setInterval(function(){
                        if (labelnextLvl.textOpacity < 1.0) {
                            labelnextLvl.textOpacity += 0.01;
                        }
                        else {
                            clearInterval(fadeInId);
                        }
                    }, 10 * dt);
                },

                fadeOut: function(dt){
                    var fadeOutId = setInterval(function(){
                        if (labelnextLvl.textOpacity > 0.0) {
                            labelnextLvl.textOpacity -= 0.01;
                        }
                        else {
                            clearInterval(fadeOutId);
                        }
                    }, 10 * dt);

                }
            },

            stats = {
                play: 0,
                playing: 1,
                lose: 2
            },

            ground = {
                y: 550,
                x: 0,
                groundHeight: 50,

                updtGround: function(){
                    this.x -= obstacleSpeed;
                    if(this.x <= -30){
                        this.x += 30;
                    }
                },

                drawGround: function(){
                    spriteGround.draw(this.x, this.y);
                    spriteGround.draw(this.x + spriteGround.imgWidth, this.y);
                }
            },// Closing ground

            player = {
                x:50,
                y:0,
                playerHeight: playerSprite.imgHeight,
                playerWidth:playerSprite.imgWidth,
                gravity: 1.6,
                speed: 0,
                jumpSpeed: 23.6,
                jumps: 0,
                score: 0,
                spin: 0,
                lives: 3,
                colission: false,

                drawPlayer: function() {
                   
                   context.save();
                   context.translate(this.x + this.playerWidth / 2, this.y + this.playerHeight / 2);
                   context.rotate(this.spin);
                   playerSprite.draw(-this.playerWidth / 2, - this.playerHeight / 2); 
                   context.restore();
                },

                playerMovement: function() {
                    this.speed += this.gravity; 
                    this.y += this.speed; 
                    this.spin += Math.PI / 180 * obstacleSpeed;

                    if(this.y > ground.y - this.playerHeight && currentStats != stats.lose) { 
                        this.y = ground.y - this.playerHeight; 
                        this.jumps =0; 
                        this.speed = 0;
                    }
                },

                reset: function() {

                    this.speed = 0;
                    this.y = 0;
                    
                    if (this.score > highScore){

                        localStorage.setItem("highScore", this.score);
                        highScore = this.score;
                    }
                    this.lives = 3;
                    this.score = 0;

                    obstacleSpeed = 6;
                    currentLvl = 0;
                    this.gravity = 1.6;

                },

                jump: function(){
                    if(this.jumps < maxJump){ 
                        this.speed = - this.jumpSpeed; 
                        this.jumps++; 
                    }
                }
            },// Closing player

            obstacle = {
                _obs: [], 
                _scored: false,
                _sprites: [redObstacle, pinkObstacle, blueObstacle, greenObstacle, yellowObstacle],
                insertTime: 0,

                insertObstacle: function(){
                    this._obs.push({ 
                        x: gameWidth, 
                        y: ground.y - Math.floor(20 + Math.random() * 100),
                        obstacleWidth: 50,
                        sprite: this._sprites[Math.floor(this._sprites.length * Math.random())]
                    });
                    this.insertTime = 35 + Math.floor(20 * Math.random());
                },
                updtObstacle: function(){

                    if (this.insertTime == 0){

                        this.insertObstacle();

                    }
                    else{

                        this.insertTime--;

                    }

                    for(var i = 0,  size = this._obs.length; i < size; i++) {
                        var obs = this._obs[i];
                        obs.x -= obstacleSpeed;

                        if (!player.colission && player.x <= obs.x + obs.obstacleWidth && player.x + player.playerWidth >= obs.x && player.y + player.playerHeight >= obs.y){
                            player.colission = true;
                        
                            setTimeout(function(){
                                player.colission = false;
                            }, 500) ;

                            if (player.lives >= 1){
                                player.lives --;
                            }

                            else{
                            currentStats = stats.lose;
                            }
                        }

                        else if (obs.x <= 0 && !obs._scored) {
                            player.score++;
                            obs._scored = true;

                            if (currentLvl < pointsToNextLvl.length && player.score == pointsToNextLvl[currentLvl]){
                                nextLvl();
                            }
                        }

                        else if (obs.x <= -obs.obstacleWidth) {
                            this._obs.splice(i, 1);
                            size--;
                            i--;
                        }
                    }
                },

                clean: function(){

                    this._obs = [];
                }, 

                drawObstacle: function(){
                    for(var i = 0, size = this._obs.length; i < size; i++){
                        var obs = this._obs[i];

                        obs.sprite.draw(obs.x, obs.y);
                    }
                }
            };// End of variable obstacle

        function onClick(event){

            if (currentStats == stats.playing){

                player.jump();

            }

            else if (currentStats == stats.play){

                currentStats = stats.playing;
            }

            else if (currentStats == stats.lose && player.y >= 2* gameHeight){

                currentStats = stats.play;

                obstacle.clean();

                player.reset();
            }
        }

        function nextLvl() {
            obstacleSpeed++;
            currentLvl++;
            player.lives++;

            if(currentLvl == 4){
                player.gravity *= 0.6;
            }

            if ( currentLvl == 5) {
                player.gravity *=2;
                maxJump = 6;
            }

            labelnextLvl.newText = "Level" + currentLvl;
            labelnextLvl.fadeIn(0.4);
            setTimeout(function(){
                labelnextLvl.fadeOut(0.4);
            }, 800);

        }
        
        function main(){

            gameHeight = window.innerHeight;
            gameWidth = window.innerWidth;

            if (gameWidth >= 600){

                gameWidth = 600;
                gameHeight = 600;

            } 

            canvas = document.createElement("canvas");

            canvas.width = gameWidth; 

            canvas.height = gameHeight;

            canvas.style.border = "1px solid #000";

            context = canvas.getContext("2d");

            document.body.appendChild(canvas);

            document.addEventListener("mousedown", onClick); 

            currentStats = stats.play; 

            highScore = localStorage.getItem("highScore"); 

            if (!highScore) {

                highScore = 0;
            } 

            img = new Image();
            img.src = "./images/sheet.png"
            runGame();
        }

        function runGame(){

            updtStats(); 

            draw();
            window.requestAnimationFrame(runGame);

        }

        function updtStats(){

            if (currentStats == stats.playing){

                obstacle.updtObstacle(); 
            }

            player.playerMovement(); 
            ground.updtGround();

        }

        function draw(){

           
            bg.draw(0, 0);

            context.fillStyle = "#fff";
            context.font = "50px Arial";
            context.fillText(player.score, 30, 68);
            context.fillText(player.lives, 540, 68);

            context.fillStyle = "rgba(0, 0, 0, " +labelnextLvl.textOpacity + ")";
            context.fillText(labelnextLvl.newText, canvas.width/2 - context.measureText(labelnextLvl.newText).width/2, canvas.height/3);

            if (currentStats == stats.playing){
                obstacle.drawObstacle();
            }
                       
            ground.drawGround(); 
           
            player.drawPlayer(); 

            if (currentStats == stats. play){
                start.draw(gameWidth/2 - start.imgWidth/2, gameHeight /2 - start.imgHeight/2);
            }

            if (currentStats == stats.lose) {
                youLose.draw(gameWidth/2 - youLose.imgWidth/2, gameHeight/2 - youLose.imgHeight/2 - spriteHighScore.imgHeight/2);
                spriteHighScore.draw(gameWidth/2 - spriteHighScore.imgWidth/2, gameHeight/2 + youLose.imgHeight/2 - spriteHighScore.imgHeight/2 - 20);
                context.fillStyle = "#fff";

                if (player.score > highScore){
                    
                    newHS.draw(gameWidth/2 - 180, gameHeight/2 +30);
                    context.fillText(player.score, 420, 480);
                }

                else {

                    context.fillText(highScore, 420, 480);
                    context.fillText(player.score, 375, 390);
                }
            }

        }
            
        main();
    </script>

</body>

</html>